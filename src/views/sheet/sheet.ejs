<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <link rel="stylesheet" href="/stylesheets/index.css" />
    <title><%= name %></title>
</head>
<body>
<%- include('../navbar.ejs') %>

<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.14.7/dist/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>

<div class="float-right">


<div class="dropdown" id="usersConnected">
    <button class="btn btn-success dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Liste des utilisateurs connect√©s :
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton"  id="listConnectedUsers" >    <a class="dropdown-item" href="#">Action</a>
    </div>
</div>
</div>


<table id="sheetTable" class="table-responsive table-bordered table-hover">
    <thead>
    <tr>
        <th></th>
        <% for(var i = 65; i < 65 + 26; i++) { %>
            <th>&#<%= i %></th>
        <% } %>
    </tr>
    </thead>
    <tbody>
    <% for(var i = 1; i < 11; i++) { %>
        <tr>
            <th><%= i %></th>
            <% for(var j = 1; j < 27; j++) { %>
                <td>
                    <input type="text" class="cell" id="cell<%= i %>_<%= j %>" size="10" value="<%= data[[i, j]] %>"/>
                </td>
            <% } %>
        </tr>
    <% } %>
    </tbody>
</table>
</body>

<script type="text/javascript">

    let version = <%= version %>;
    subscribe();
    update(300);
    updateUsersConnected(2000);

    window.onbeforeunload = function () {
        navigator.sendBeacon("/sheet/unsubscribe/<%= id %>", null);

        return undefined;
    }

    for (let i = 1; i < 11; i++) {
        for (let j = 1; j < 27; j++) {
            let cellIJ = document.getElementById("cell" + i + "_" + j);
            cellIJ.addEventListener("keyup", (e) => {
                sendCell(i, j, cellIJ.value);
            });
        }
    }

    async function subscribe() {
        try {
            await fetch("/sheet/subscribe/<%= id %>", {
                method: "POST",
            });
        } catch (error) {
            console.error("Error:", error);
        }
    }

    async function update(time) {
        try {
            const response = await fetch("/sheet/update/<%= id %>", {
                method: "GET",
                headers: {
                    'If-None-Match': version,
                    Prefer: 'wait=' + time,
                    Accept: 'application/json'
                }
            });

            if (response.status == 304) {
                await update(time);
            } else if (response.status != 200) { // Error
                console.log(response.statusText);

                // Reconnect in one second
                await new Promise(resolve => setTimeout(resolve, 1000));
                await update(time);
            } else {
                const data = await response.json();
                version = Number(response.headers.get('ETag'));

                Object.keys(data).forEach(function (key) {

                    let coord = key.split(',');
                    let i = coord[0];
                    let j = coord[1];

                    let cell = document.getElementById("cell" + i + "_" + j);
                    cell.value = data[key];
                });

                await update(time);
            }

            if (response.status == 304 || 200) {

            }

        } catch (error) {
            console.error("Error:", error);
        }
    }

    async function updateUsersConnected(time) {

        try {
            const response = await fetch("/sheet/usersOnPage/<%= id %>", {
                method: "GET",
            });

            if (response.status == 200) {
                const data = await response.json();

                let list = document.getElementById("listConnectedUsers");

                while (list.firstChild) {
                    list.removeChild(list.firstChild);
                }

                for (var i = 0; i < data.length; i++) {
                    var li = document.createElement('a');
                    li.classList.add("dropdown-item") ;
                    li.href = "#"
                    li.textContent = data[i];
                    list.appendChild(li);
                }
            }

            await new Promise(resolve => setTimeout(resolve, time));
            await updateUsersConnected(time);

        } catch (error) {
            console.error("Error:", error);
        }
    }

    async function sendCell(i, j, value) {
        try {
            let obj = {
                id: "<%= id %>",
                si: i,
                sj: j,
                cellValue: value
            }

            const response = await fetch("/sheet/<%= id %>", {
                method: "PATCH",
                headers: {Accept: "application/json", "Content-Type": "application/json"},
                body: JSON.stringify(obj),
            });

            if (response.ok) {
                version = version + 1;
            } else {
                throw response.status;
            }

        } catch (error) {
            console.error("Error:", error);
        }
    }
</script>

</html>